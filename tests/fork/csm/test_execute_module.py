import subprocess
import time
import json
from dataclasses import dataclass
from typing import cast

from eth_account import Account
import pytest
from web3 import Web3
from web3.middleware import construct_simple_cache_middleware
from web3_multi_provider import MultiProvider

from src import variables
from src.main import ipfs_providers
from src.modules.csm.checkpoint import FrameCheckpointsIterator
from src.modules.csm.csm import CSOracle, logger
from src.providers.consensus.client import ConsensusClient, LiteralState
from src.providers.consensus.types import BlockDetailsResponse, BlockRootResponse
from src.providers.execution.contracts.hash_consensus import HashConsensusContract
from src.providers.ipfs import MultiIPFSProvider, CID
from src.types import BlockRoot, SlotNumber
from src.utils.blockstamp import build_blockstamp
from src.utils.slot import get_next_non_missed_slot
from src.variables import (
    HTTP_REQUEST_TIMEOUT_CONSENSUS,
    HTTP_REQUEST_RETRY_COUNT_CONSENSUS,
    HTTP_REQUEST_SLEEP_BEFORE_RETRY_IN_SECONDS_CONSENSUS,
)
from src.web3py.contract_tweak import tweak_w3_contracts
from src.web3py.extensions import (
    CSM,
    LidoContracts,
    LidoValidatorsProvider,
    TransactionUtils,
    ConsensusClientModule,
    KeysAPIClientModule,
)


@dataclass
class FrameConfig:
    fast_lane: int
    frame_size: int
    initial_epoch: int


pure_cl_client = ConsensusClient(
    variables.CONSENSUS_CLIENT_URI,
    HTTP_REQUEST_TIMEOUT_CONSENSUS,
    HTTP_REQUEST_RETRY_COUNT_CONSENSUS,
    HTTP_REQUEST_SLEEP_BEFORE_RETRY_IN_SECONDS_CONSENSUS,
)

genesis_time = int(pure_cl_client.get_genesis().genesis_time)
logger.info(f"Genesis time on CL: {genesis_time}")

finalized_slot = SlotNumber(int(pure_cl_client.get_block_header('finalized').data.header.message.slot))
logger.info(f"Finalized slot on CL: {finalized_slot}")

frame_config = FrameConfig(
    fast_lane=0,
    frame_size=10,
    initial_epoch=(finalized_slot // 32) - 20,  # step back 20 epochs (~2h) from last finalized epoch
)
logger.info(f"Frame config to set: {frame_config}")

slot_for_fork = SlotNumber((frame_config.initial_epoch - 3) * 32 - 31)
logger.info(f"Slot to fork {slot_for_fork}")

el_block_number_to_fork = int(
    pure_cl_client.get_block_details(slot_for_fork).message.body.execution_payload.block_number
)
logger.info(f"Block number to fork {el_block_number_to_fork}")


@pytest.fixture
def running_slots(request):
    slots = request.param
    iterator = iter(slots)
    current = slots[0]

    def get_current() -> SlotNumber | None:
        nonlocal current
        return current

    def get_next() -> SlotNumber | None:
        nonlocal current
        try:
            current = next(iterator)
        except StopIteration:
            current = None
        return current

    return get_next, get_current


@pytest.fixture()
def zero_min_checkpoint_step(monkeypatch):
    with monkeypatch.context():
        monkeypatch.setattr(
            FrameCheckpointsIterator,
            "MIN_CHECKPOINT_STEP",
            0,
        )
        yield


@pytest.fixture()
def run_fork():
    cli_params = [
        'anvil',
        '--config-out',
        'localhost.json',
        '--auto-impersonate',
        '-f',
        variables.EXECUTION_CLIENT_URI[0],
        '--fork-block-number',
        str(el_block_number_to_fork),
    ]
    process = subprocess.Popen(cli_params, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    time.sleep(5)
    logger.info(f"Started fork from block {el_block_number_to_fork}")
    yield process
    process.terminate()
    process.wait()
    subprocess.run(['rm', 'localhost.json'])


@pytest.fixture()
def provider(run_fork):
    yield MultiProvider(['http://127.0.0.1:8545'], request_kwargs={'timeout': variables.HTTP_REQUEST_TIMEOUT_EXECUTION})


@pytest.fixture()
def web3(provider) -> Web3:
    web3 = Web3(provider)
    tweak_w3_contracts(web3)
    web3.middleware_onion.add(construct_simple_cache_middleware())
    web3.provider.make_request('anvil_setBlockTimestampInterval', [12])
    yield web3


@pytest.fixture()
def fork_accounts(monkeypatch, web3):
    with open('localhost.json') as f:
        data = json.load(f)
        addresses = data['available_accounts']
        private_keys = data['private_keys']
    return [web3.to_checksum_address(address) for address in addresses], private_keys


@pytest.fixture()
def consensus(web3):

    csm = CSM(web3)

    # Contract Creation Code from etherscan without last bytes
    hash_consensus_bin = "0x60e060405234801562000010575f80fd5b50604051620036f6380380620036f68339810160408190526200003391620005aa565b865f03620000545760405163fb305deb60e01b815260040160405180910390fd5b855f03620000755760405163fb305deb60e01b815260040160405180910390fd5b6200008087620001a3565b6001600160401b03166080526200009786620001a3565b6001600160401b031660a052620000ae85620001a3565b6001600160401b031660c0526001600160a01b038216620000e257604051636b35b1b760e01b815260040160405180910390fd5b6001600160a01b0381166200010a5760405163154f6dd160e31b815260040160405180910390fd5b620001165f83620001e1565b505f6200012a6001600160401b036200023e565b90506200017581868660405180606001604052805f6001600160401b031681526020015f6001600160401b031681526020015f6001600160401b03168152506200025460201b60201c565b50600880546001600160a01b0319166001600160a01b03929092169190911790555062000671945050505050565b5f6001600160401b03821115620001dd57604080516306dfcc6560e41b815260048101919091526024810183905260440160405180910390fd5b5090565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320008162000210858562000406565b9050801562000234575f858152602083905260409020620002329085620004d6565b505b9150505b92915050565b5f620002386200024e83620004f3565b62000525565b825f03620002755760405163ef3d10c160e01b815260040160405180910390fd5b6080516200028d906001600160401b03168462000621565b821115620002ae576040516385b552e160e01b815260040160405180910390fd5b6040518060600160405280620002ca86620001a360201b60201c565b6001600160401b03168152602001620002e385620001a3565b6001600160401b03168152602001620002fc84620001a3565b6001600160401b0390811690915281515f805460208501516040909501518416600160801b02600160801b600160c01b031995851668010000000000000000026001600160801b0319909216938516939093171793909316179091558151168414158062000377575080602001516001600160401b03168314155b15620003b75760408051858152602081018590527fe343afa5219eaf28c50ce9cd658acd69cbe28b34fa773eb3a523e28007f64afc910160405180910390a15b80604001516001600160401b0316821462000400576040518281527fab8b22776606cc75c47792d32af7e63ed9ca74e85c9780a7fc7994fdbd6fde2b9060200160405180910390a15b50505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16620004cc575f848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055620004813390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505062000238565b5f91505062000238565b5f620004ec836001600160a01b0384166200053f565b9392505050565b5f60a0516001600160401b031660c0516001600160401b0316836200051991906200063b565b62000238919062000651565b5f6080516001600160401b03168262000238919062000651565b5f8181526001830160205260408120546200058657508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915562000238565b505f62000238565b80516001600160a01b0381168114620005a5575f80fd5b919050565b5f805f805f805f60e0888a031215620005c1575f80fd5b8751965060208801519550604088015194506060880151935060808801519250620005ef60a089016200058e565b9150620005ff60c089016200058e565b905092959891949750929550565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176200023857620002386200060d565b818103818111156200023857620002386200060d565b5f826200066c57634e487b7160e01b5f52601260045260245ffd5b500490565b60805160a05160c05161301b620006db5f395f81816103d1015281816117c70152612c8201525f81816103ad0152818161179d0152612c4e01525f81816103890152818161128a015281816119c70152818161252b015281816125c70152612ae0015261301b5ff3fe608060405234801561000f575f80fd5b5060043610610213575f3560e01c80636fb1bf661161011f578063ad231cb2116100a9578063d547741f11610079578063d547741f14610619578063e33a8d391461062c578063e76cd4e01461063f578063ea87627d14610652578063fb4209ac14610677575f80fd5b8063ad231cb2146105e3578063c1ba4e59146105eb578063c26c12eb146105fe578063ca15c87314610606575f80fd5b806398041ea3116100ef57806398041ea31461058757806399229f581461059a5780639eab5253146105ad578063a1e07cac146105b5578063a217fddf146105dc575f80fd5b80636fb1bf66146104d157806372f79b13146105135780639010d07c1461053057806391d1485414610543575f80fd5b8063323a41f6116101a0578063606c0c9411610170578063606c0c941461037c5780636095012f1461040f57806360a50a5c1461041757806360e618011461043e5780636d058268146104ac575f80fd5b8063323a41f61461032d57806334aa67531461034057806336568abe14610353578063433ab1f314610366575f80fd5b806320b4d751116101e657806320b4d7511461029c578063239c327f146102af578063248a9ca3146102d65780632f2ff15d146103045780632fd2d75014610317575f80fd5b806301ffc9a714610217578063115a57c41461023f57806316f6f03e146102745780631951c03714610289575b5f80fd5b61022a610225366004612ca7565b61069e565b60405190151581526020015b60405180910390f35b6102667f921f40f434e049d23969cbe68d9cf3ac1013fbe8945da07963af6f3142de6afe81565b604051908152602001610236565b610287610282366004612ce9565b6106c8565b005b61022a610297366004612d11565b610701565b61022a6102aa366004612d11565b610720565b6102667f4af6faa30fabb2c4d8d567d06168f9be8adb583156c1ecb424b4832a7e4d671781565b6102666102e4366004612d2a565b5f9081525f80516020612fef833981519152602052604090206001015490565b610287610312366004612d41565b61075e565b61031f610794565b604051610236929190612da5565b61028761033b366004612d2a565b6108db565b61028761034e366004612df2565b61099e565b610287610361366004612d41565b610a5e565b61036e610a91565b604051610236929190612e12565b6103f46001600160401b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000008216917f00000000000000000000000000000000000000000000000000000000000000001690565b60408051938452602084019290925290820152606001610236565b610266610aa6565b6102667f10b016346186602d93fc7a27ace09ba944baf9453611b186d36acd3d3d667dc081565b61045161044c366004612d11565b610ab8565b60405161023691905f60e082019050825182526020830151602083015260408301511515604083015260608301511515606083015260808301511515608083015260a083015160a083015260c083015160c083015292915050565b6008546001600160a01b03165b6040516001600160a01b039091168152602001610236565b604080516060810182525f546001600160401b03808216808452600160401b8304821660208501819052600160801b90930490911692909301829052906103f4565b61051b610c59565b60408051928352602083019190915201610236565b6104b961053e366004612df2565b610c79565b61022a610551366004612d41565b5f9182525f80516020612fef833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610287610595366004612ce9565b610cb9565b6102876105a8366004612d2a565b610ced565b61036e610d24565b6102667f66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a5181565b6102665f81565b610287610d30565b6102876105f9366004612d2a565b610d41565b600554610266565b610266610614366004612d2a565b610d52565b610287610627366004612d41565b610d89565b61028761063a366004612e53565b610db9565b61028761064d366004612d11565b610dc4565b61065a610df7565b604080519384526020840192909252151590820152606001610236565b6102667fc5219a8d2d0107a57aad00b22081326d173df87bad251126f070df2659770c3e81565b5f6001600160e01b03198216635a05180f60e01b14806106c257506106c282610e2b565b92915050565b7f66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a516106f281610e5f565b6106fc8383610e69565b505050565b6001600160a01b0381165f9081526003602052604081205415156106c2565b6001600160a01b0381165f908152600360205260408120548015801590610757575061075760018203610751611157565b516111bd565b9392505050565b5f8281525f80516020612fef833981519152602052604090206001015461078481610e5f565b61078e83836111f6565b50505050565b60608061079f611157565b602001516004546001600160401b0316146107b8579091565b600754806001600160401b038111156107d3576107d3612e7c565b6040519080825280602002602001820160405280156107fc578160200160208202803683370190505b509250806001600160401b0381111561081757610817612e7c565b604051908082528060200260200182016040528015610840578160200160208202803683370190505b5091505f5b818110156108d5575f81815260066020908152604091829020825180840190935280548084526001909101546001600160401b031691830191909152855186908490811061089557610895612e90565b60200260200101818152505080602001516001600160401b03168483815181106108c1576108c1612e90565b602090810291909101015250600101610845565b50509091565b5f6108e581610e5f565b604080516060810182525f546001600160401b03808216808452600160401b830482166020850152600160801b9092041692820192909252906109274261124b565b10610945576040516329d1e0ff60e01b815260040160405180910390fd5b61096b8382602001516001600160401b031683604001516001600160401b03168461125d565b610973611414565b61097b61147f565b6020015110156106fc576040516323ca23a760e21b815260040160405180910390fd5b7f921f40f434e049d23969cbe68d9cf3ac1013fbe8945da07963af6f3142de6afe6109c881610e5f565b604080516060810182525f80546001600160401b038082168452600160401b820481166020850152600160801b9091041692820192909252429190610a0e9083906114e2565b604080516060810182525f546001600160401b038082168352600160401b820481166020840152600160801b9091041691810191909152909150610a579082908790879061125d565b5050505050565b6001600160a01b0381163314610a875760405163334bd91960e11b815260040160405180910390fd5b6106fc82826114f6565b606080610a9e6001611542565b915091509091565b5f610aaf61147f565b60200151905090565b6040805160e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905290610af8611157565b602081018051845251600554919250610b109161170e565b50506020808401919091526001600160a01b0384165f908152600390915260409081902054801580159285019290925290610c5257806001900390505f60018281548110610b6057610b60612e90565b5f918252602091829020604080518082019091529101546001600160401b03808216808452600160401b909204168284015260a087018190529185015190925014610bab575f610bc9565b6020808201516001600160401b03165f908152600690915260409020545b60c08501525f610bd84261179a565b905083604001518111158015610bf85750610bf1611414565b8460200151115b151560808601528351610c0c9084906111bd565b15801560608701819052610c21575084608001515b15610c4f575f546020850151610c4791600160801b90046001600160401b031690612eb8565b811160808601525b50505b5050919050565b5f805f610c64611157565b90508060200151816040015192509250509091565b5f8281527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260408220610cb19084611804565b949350505050565b7f66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a51610ce381610e5f565b6106fc838361180f565b7f4af6faa30fabb2c4d8d567d06168f9be8adb583156c1ecb424b4832a7e4d6717610d1781610e5f565b610d2082611987565b5050565b606080610a9e5f611542565b600154610d3f905f1990611a94565b565b600154610d4f908290611a94565b50565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060208190526040822061075790611bb0565b5f8281525f80516020612fef8339815191526020526040902060010154610daf81610e5f565b61078e83836114f6565b6106fc838383611bb9565b7fc5219a8d2d0107a57aad00b22081326d173df87bad251126f070df2659770c3e610dee81610e5f565b610d2082612101565b5f805f610e02611157565b602001519250610e148360055461170e565b50909250839050610e23611414565b149050909192565b5f6001600160e01b03198216637965db0b60e01b14806106c257506301ffc9a760e01b6001600160e01b03198316146106c2565b610d4f8133612300565b5f610e7383612360565b600180549192505f91610e869190612ecb565b905080821115610e9857610e98612ede565b5f60018381548110610eac57610eac612e90565b5f918252602091829020604080518082019091529101546001600160401b038082168352600160401b90910416918101919091529050828214610ff6575f60028381548110610efd57610efd612e90565b5f91825260209091200154600280546001600160a01b039092169250829186908110610f2b57610f2b612e90565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060018381548110610f6957610f69612e90565b905f5260205f200160018581548110610f8457610f84612e90565b5f91825260209091208254910180546001600160401b0392831667ffffffffffffffff1982168117835593546001600160801b0319909116909317600160401b93849004909216909202179055610fdc846001612eb8565b6001600160a01b039091165f908152600360205260409020555b600180548061100757611007612ef2565b5f8281526020902081015f1990810180546001600160801b0319169055019055600280548061103857611038612ef2565b5f82815260208082205f19908401810180546001600160a01b03191690559092019092556001600160a01b038716808352600382526040808420939093558251858152918201879052917fa182730913550d27dc6c5813fad297cb0785871bec3d0152c5650e59c5d39d60910160405180910390a280516001600160401b03161561114d575f6110c6611157565b90508060200151825f01516001600160401b03161480156110f1575080602001516110ef611414565b105b1561114b576020808301516001600160401b039081165f90815260069092526040822060010180549092916111269116612f06565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b505b610a578483611a94565b61117860405180606001604052805f81526020015f81526020015f81525090565b6111b842604080516060810182525f546001600160401b038082168352600160401b820481166020840152600160801b90910416918101919091526123a1565b905090565b6001545f9081806111ce85846123d5565b91509150805f141580156111ec57506111ec8683600184038661240f565b9695505050505050565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816112238585612450565b90508015610cb1575f8581526020839052604090206112429085612509565b50949350505050565b5f6106c26112588361179a565b61251d565b825f0361127d5760405163ef3d10c160e01b815260040160405180910390fd5b6112b06001600160401b037f00000000000000000000000000000000000000000000000000000000000000001684612f1e565b8211156112d0576040516385b552e160e01b815260040160405180910390fd5b60405180606001604052806112e486612551565b6001600160401b031681526020016112fb85612551565b6001600160401b0316815260200161131284612551565b6001600160401b0390811690915281515f805460208501516040909501518416600160801b0267ffffffffffffffff60801b19958516600160401b026001600160801b03199092169385169390931717939093161790915581511684141580611388575080602001516001600160401b03168314155b156113c75760408051858152602081018590527fe343afa5219eaf28c50ce9cd658acd69cbe28b34fa773eb3a523e28007f64afc910160405180910390a15b80604001516001600160401b0316821461078e576040518281527fab8b22776606cc75c47792d32af7e63ed9ca74e85c9780a7fc7994fdbd6fde2b9060200160405180910390a150505050565b60085460408051630d61356760e21b815290515f926001600160a01b031691633584d59c9160048083019260209291908290030181865afa15801561145b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b89190612f35565b6114a060405180606001604052805f81526020015f81526020015f81525090565b604080516060810182525f80546001600160401b038082168452600160401b820481166020850152600160801b90910416928201929092526111b8919061258a565b5f6107576114f08484612661565b836126c2565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320008161152385856126f1565b90508015610cb1575f8581526020839052604090206112429085612782565b60015460609081905f80851561156e5761156461155d611157565b51846123d5565b9092509050611571565b50815b61157b8282612ecb565b6001600160401b0381111561159257611592612e7c565b6040519080825280602002602001820160405280156115bb578160200160208202803683370190505b50945084516001600160401b038111156115d7576115d7612e7c565b604051908082528060200260200182016040528015611600578160200160208202803683370190505b509350815b81811015611705575f6116188583612f60565b90505f6001828154811061162e5761162e612e90565b5f9182526020808320604080518082019091529201546001600160401b038082168452600160401b9091041690820152915061166a8685612ecb565b90506002838154811061167f5761167f612e90565b905f5260205f20015f9054906101000a90046001600160a01b03168982815181106116ac576116ac612e90565b60200260200101906001600160a01b031690816001600160a01b031681525050815f01516001600160401b03168882815181106116eb576116eb612e90565b602002602001018181525050505050806001019050611605565b50505050915091565b6004545f90819081906001600160401b0316851461173457505f91505f19905081611793565b50506007545f91505f19908290815b81811015611790575f818152600660205260409020600101546001600160401b0316868110611787575f828152600660205260409020549550909350915082611790565b50600101611743565b50505b9250925092565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160401b03167f00000000000000000000000000000000000000000000000000000000000000006001600160401b0316836117fa9190612ecb565b6106c29190612f73565b5f6107578383612796565b6001600160a01b0382165f908152600360205260409020541561184557604051637670720160e11b815260040160405180910390fd5b6001600160a01b03821661186c576040516303988b8160e61b815260040160405180910390fd5b6040805180820182525f808252602080830182815260018054808201825581855294517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909501805492516001600160401b03908116600160401b026001600160801b031990941696169590951791909117909355600280548085019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0388166001600160a01b03199091168117909155925483835260039091529083902081905591517fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e906119759084908690918252602082015260400190565b60405180910390a26106fc8282611a94565b604080516060810182525f546001600160401b038082168352600160401b8204811660208401819052600160801b9092041692820192909252906119ec907f000000000000000000000000000000000000000000000000000000000000000090612f86565b6001600160401b0316821115611a15576040516385b552e160e01b815260040160405180910390fd5b80604001516001600160401b03168214610d2057611a3282612551565b5f80546001600160401b0392909216600160801b0267ffffffffffffffff60801b199092169190911790556040518281527fab8b22776606cc75c47792d32af7e63ed9ca74e85c9780a7fc7994fdbd6fde2b9060200160405180910390a15050565b611a9f600282612f73565b8211611ae457611ab0600282612f73565b611abb906001612eb8565b604051632b2dd84d60e01b81526004810191909152602481018390526044015b60405180910390fd5b600554828114611b8e57611b475f198414611b1f577f66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a51611b41565b7f10b016346186602d93fc7a27ace09ba944baf9453611b186d36acd3d3d667dc05b33612300565b600583905560408051848152602081018490529081018290527f9f40cfd22fe91777c78f252bd21a710f3fb007dc2f321876891e7644ba0ae1759060600160405180910390a15b5f546001600160401b0316611ba24261124b565b106106fc576106fc836127bc565b5f6106c2825490565b825f03611bd957604051631258e44360e01b815260040160405180910390fd5b6001600160401b03831115611c015760405163aac8f00960e01b815260040160405180910390fd5b81611c1e5760405162bf199760e01b815260040160405180910390fd5b5f611c2833612360565b90505f60018281548110611c3e57611c3e612e90565b5f9182526020808320604080518082019091529201546001600160401b038082168452600160401b90910416908201529150611c7861286c565b9050808414611ca457604051632a37dd3d60e11b81526004810182905260248101859052604401611adb565b425f611caf8261179a565b604080516060810182525f80546001600160401b038082168452600160401b820481166020850152600160801b9091041692820192909252919250611cf484836123a1565b905080602001518a14611d1a57604051631258e44360e01b815260040160405180910390fd5b8060400151831115611d3f57604051637c01d16560e11b815260040160405180910390fd5b81604001516001600160401b03168160200151611d5c9190612eb8565b8311158015611d755750611d7387825f01516111bd565b155b15611d9357604051633e1ca93d60e01b815260040160405180910390fd5b611d9b611414565b8a11611dd75785516001600160401b03168a03611dcb57604051631cf7e8a160e31b815260040160405180910390fd5b50505050505050505050565b6004545f906001600160401b03168b14611e0e57506004805467ffffffffffffffff19166001600160401b038c161790555f611e13565b506007545b5f805b82826001600160401b0316108015611e4557506001600160401b0382165f908152600660205260409020548c14155b15611e5a57611e5382612fb1565b9150611e16565b88516001600160401b03168d03611f325760208901516001600160401b0381168411611e8857611e88612ede565b806001600160401b0316836001600160401b031603611eba5760405163fd10cf7360e01b815260040160405180910390fd5b6001600160401b038082165f9081526006602052604081206001018054919290918391611ee79116612f06565b91906101000a8154816001600160401b0302191690836001600160401b0316021790556001600160401b031690506001600554611f249190612ecb565b8103611f2f57600192505b50505b5f83836001600160401b03161015611fa0576001600160401b038084165f90815260066020526040812060010180549092611f6d9116612fb1565b91906101000a8154816001600160401b0302191690836001600160401b0316021790556001600160401b03169050612000565b506040805180820182528d8152600160208083018281526001600160401b038781165f9081526006909352949091209251835551918101805467ffffffffffffffff19169290931691909117909155611ff884612fd6565b600781905593505b60405180604001604052808f6001600160401b03168152602001846001600160401b031681525060018c8154811061203a5761203a612e90565b5f91825260209182902083519101805493909201516001600160401b03908116600160401b026001600160801b031990941691161791909117905561207c3390565b6001600160a01b03168e7f92f77576dabd7bad26f75c36abb3021b5bbb66a3e5688570a0355daddd4174888f6040516120b791815260200190565b60405180910390a360055481106120e2576120dd858e856001600160401b0316846128b3565b6120f1565b81156120f1576120f18561299b565b5050505050505050505050505050565b6008546001600160a01b0390811690821661212f5760405163154f6dd160e31b815260040160405180910390fd5b806001600160a01b0316826001600160a01b0316036121615760405163f1b3699f60e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b03848116918217909255604051918316917f3b59429457a41af89ea682ac9ed8abb8e99eb5c7d3363d5eedfc6bff6271a81e905f90a35f6121b5611157565b90505f60045f0160089054906101000a90046001600160401b03166001600160401b031690505f836001600160a01b0316633584d59c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612218573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061223c9190612f35565b90505f856001600160a01b0316633584d59c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561227b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061229f9190612f35565b90508360200151821080156122b75750836020015181105b80156122c65750836020015183145b156122f857600454600160801b90046001600160401b03165f908152600660205260409020546122f68582612a07565b505b505050505050565b5f8281525f80516020612fef833981519152602090815260408083206001600160a01b038516845290915290205460ff16610d205760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401611adb565b6001600160a01b0381165f9081526003602052604081205480820361239857604051638d35f2ed60e01b815260040160405180910390fd5b5f190192915050565b6123c260405180606001604052805f81526020015f81526020015f81525090565b6107576123cf8484612661565b8361258a565b6005545f9081908381106123ee575f9250839150612407565b6123f88486612f60565b92506124048184612eb8565b91505b509250929050565b5f8161241b8585612ecb565b6124259190612f60565b82856124318289612eb8565b61243b9190612ecb565b6124459190612f60565b111595945050505050565b5f8281525f80516020612fef833981519152602081815260408084206001600160a01b038616855290915282205460ff16612500575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556124b63390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106c2565b5f9150506106c2565b5f610757836001600160a01b038416612a86565b5f6106c26001600160401b037f00000000000000000000000000000000000000000000000000000000000000001683612f73565b5f6001600160401b0382111561258657604080516306dfcc6560e41b8152600481019190915260248101839052604401611adb565b5090565b6125ab60405180606001604052805f81526020015f81526020015f81525090565b5f6125b684846126c2565b90505f6125c282612ad2565b90505f7f000000000000000000000000000000000000000000000000000000000000000085602001516125f59190612f86565b612608906001600160401b031683612eb8565b905060405180606001604052808781526020016001846126289190612ecb565b6001600160401b031681526020015f612642600185612ecb565b61264c9190612ecb565b6001600160401b031690529695505050505050565b5f8061266c8461124b565b83519091506001600160401b031681101561269a5760405163668441f560e11b815260040160405180910390fd5b602083015183516001600160401b03918216916126b8911683612ecb565b610cb19190612f73565b5f81602001516001600160401b0316836126dc9190612f1e565b825161075791906001600160401b0316612eb8565b5f8281525f80516020612fef833981519152602081815260408084206001600160a01b038616855290915282205460ff1615612500575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106c2565b5f610757836001600160a01b038416612b06565b5f825f0182815481106127ab576127ab612e90565b905f5260205f200154905092915050565b604080516060810182525f80546001600160401b038082168452600160401b820481166020850152600160801b90910416928201929092524291906128029083906123a1565b905080604001516128128361179a565b111561281d57505050565b806020015161282a611414565b1061283457505050565b5f805f61284584602001518761170e565b9250925092505f82126128635761285e848484846128b3565b6122f8565b6122f88461299b565b60085460408051635be2042560e01b815290515f926001600160a01b031691635be204259160048083019260209291908290030181865afa15801561145b573d5f803e3d5ffd5b6020840151600454600160401b90046001600160401b03161415806128ea5750600454600160801b90046001600160401b03168214155b1561078e576020840151600480546001600160401b03858116600160801b0267ffffffffffffffff60801b19918516600160401b02919091167fffffffffffffffff00000000000000000000000000000000ffffffffffffffff909216919091171790556040517f2b6bc782c916fa763822f1e50c6db0f95dade36d6541a8a4cbe070735b8b226d906129899086908590918252602082015260400190565b60405180910390a261078e8484612a07565b6020810151600454600160401b90046001600160401b031603610d4f57600480546fffffffffffffffff00000000000000001916905560208101516040517fde3f4ea5aa67881831e8fad2b0855d47e75aa63a2fae6ef657ffd5f856c4a613905f90a2610d4f81612be0565b600854602083015160408401516001600160a01b039092169163063f36ad918491612a3190612c40565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064015f604051808303815f87803b158015612a74575f80fd5b505af11580156122f8573d5f803e3d5ffd5b5f818152600183016020526040812054612acb57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556106c2565b505f6106c2565b5f6106c26001600160401b037f00000000000000000000000000000000000000000000000000000000000000001683612f1e565b5f8181526001830160205260408120548015612500575f612b28600183612ecb565b85549091505f90612b3b90600190612ecb565b9050808214612b9a575f865f018281548110612b5957612b59612e90565b905f5260205f200154905080875f018481548110612b7957612b79612e90565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080612bab57612bab612ef2565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506106c2565b600854602082015160405163d438121760e01b81526001600160a01b039092169163d438121791612c179160040190815260200190565b5f604051808303815f87803b158015612c2e575f80fd5b505af1158015610a57573d5f803e3d5ffd5b5f612c746001600160401b037f00000000000000000000000000000000000000000000000000000000000000001683612f1e565b6106c2906001600160401b037f000000000000000000000000000000000000000000000000000000000000000016612eb8565b5f60208284031215612cb7575f80fd5b81356001600160e01b031981168114610757575f80fd5b80356001600160a01b0381168114612ce4575f80fd5b919050565b5f8060408385031215612cfa575f80fd5b612d0383612cce565b946020939093013593505050565b5f60208284031215612d21575f80fd5b61075782612cce565b5f60208284031215612d3a575f80fd5b5035919050565b5f8060408385031215612d52575f80fd5b82359150612d6260208401612cce565b90509250929050565b5f815180845260208085019450602084015f5b83811015612d9a57815187529582019590820190600101612d7e565b509495945050505050565b604080825283519082018190525f906020906060840190828701845b82811015612ddd57815184529284019290840190600101612dc1565b50505083810360208501526111ec8186612d6b565b5f8060408385031215612e03575f80fd5b50508035926020909101359150565b604080825283519082018190525f906020906060840190828701845b82811015612ddd5781516001600160a01b031684529284019290840190600101612e2e565b5f805f60608486031215612e65575f80fd5b505081359360208301359350604090920135919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808201808211156106c2576106c2612ea4565b818103818111156106c2576106c2612ea4565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b5f6001600160401b0382168061239857612398612ea4565b80820281158282048414176106c2576106c2612ea4565b5f60208284031215612f45575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f82612f6e57612f6e612f4c565b500690565b5f82612f8157612f81612f4c565b500490565b6001600160401b03818116838216028082169190828114612fa957612fa9612ea4565b505092915050565b5f6001600160401b03808316818103612fcc57612fcc612ea4565b6001019392505050565b5f60018201612fe757612fe7612ea4565b506001019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a164736f6c6343000818000a"

    HashConsensus = web3.eth.contract(ContractFactoryClass=HashConsensusContract, bytecode=hash_consensus_bin)

    report_processor = web3.to_checksum_address(csm.oracle.address)
    admin = web3.to_checksum_address(web3.eth.accounts[0])

    tx = HashConsensus.constructor(
        slotsPerEpoch=32,
        secondsPerSlot=12,
        genesisTime=genesis_time,
        epochsPerFrame=frame_config.frame_size,
        fastLaneLengthSlots=frame_config.fast_lane,
        admin=admin,
        reportProcessor=report_processor,
    )

    tx_receipt = web3.eth.wait_for_transaction_receipt(web3.eth.send_transaction(tx.build_transaction({'from': admin})))

    new_consensus_address = tx_receipt.contractAddress

    new_consensus = web3.eth.contract(address=new_consensus_address, ContractFactoryClass=HashConsensusContract)

    DEFAULT_ADMIN_ROLE = "0x" + new_consensus.functions.DEFAULT_ADMIN_ROLE().call().hex()
    default_admin = new_consensus.functions.getRoleMember(DEFAULT_ADMIN_ROLE, 0).call()

    new_initial_epoch = new_consensus.functions.updateInitialEpoch(frame_config.initial_epoch)
    web3.eth.send_transaction(new_initial_epoch.build_transaction({'from': default_admin}))

    MANAGE_CONSENSUS_CONTRACT_ROLE = "0x" + csm.oracle.functions.MANAGE_CONSENSUS_CONTRACT_ROLE().call().hex()
    oracle_admin = csm.oracle.functions.getRoleMember(DEFAULT_ADMIN_ROLE, 0).call()
    web3.provider.make_request('anvil_setBalance', [oracle_admin, hex(10**18)])

    tx_grant_role = csm.oracle.functions.grantRole(MANAGE_CONSENSUS_CONTRACT_ROLE, admin)
    web3.eth.send_transaction(tx_grant_role.build_transaction({'from': oracle_admin}))

    tx = csm.oracle.functions.setConsensusContract(new_consensus_address)
    web3.eth.send_transaction(tx.build_transaction({'from': admin}))

    storage_slot = web3.keccak(text="lido.BaseOracle.lastProcessingRefSlot")
    web3.provider.make_request('anvil_setStorageAt', [csm.oracle.address, storage_slot, bytes(32)])

    yield cast(
        HashConsensusContract,
        web3.eth.contract(
            address=new_consensus_address,
            ContractFactoryClass=HashConsensusContract,
            decode_tuples=True,
        ),
    )


@pytest.fixture()
def use_fork_accounts_as_reporters(web3, consensus, fork_accounts):
    addresses, private_keys = fork_accounts

    DEFAULT_ADMIN_ROLE = "0x" + consensus.functions.DEFAULT_ADMIN_ROLE().call().hex()
    MANAGE_MEMBERS_AND_QUORUM_ROLE = "0x" + consensus.functions.MANAGE_MEMBERS_AND_QUORUM_ROLE().call().hex()

    hash_consensus_admin = consensus.functions.getRoleMember(DEFAULT_ADMIN_ROLE, 0).call()

    # two first accounts are used for report
    for address in addresses[:2]:
        tx_grant_role = consensus.functions.grantRole(DEFAULT_ADMIN_ROLE, address)
        web3.eth.send_transaction(tx_grant_role.build_transaction({'from': hash_consensus_admin}))

        tx_grant_role = consensus.functions.grantRole(MANAGE_MEMBERS_AND_QUORUM_ROLE, address)
        web3.eth.send_transaction(tx_grant_role.build_transaction({'from': address}))

        current_quorum = consensus.functions.getQuorum().call()
        tx_add_member = consensus.functions.addMember(address, current_quorum + 1)
        web3.eth.send_transaction(tx_add_member.build_transaction({'from': address}))

    return private_keys[:2]


@pytest.fixture()
def adjust_cl_client(monkeypatch, web3, running_slots):

    get_next, get_current = running_slots

    def get_block_root(self, state_id: SlotNumber | BlockRoot | LiteralState) -> BlockRootResponse:
        """
        Spec: https://ethereum.github.io/beacon-APIs/#/Beacon/getBlockRoot

        There is no cache because this method is used to get finalized and head blocks.
        """

        def _inner(_state_id: SlotNumber | BlockRoot | LiteralState):
            data, _ = self._get(
                self.API_GET_BLOCK_ROOT,
                path_params=(_state_id,),
            )
            if not isinstance(data, dict):
                raise ValueError("Expected mapping response from getBlockRoot")
            return BlockRootResponse.from_response(**data)

        if state_id not in ['justified', 'finalized', 'head']:
            return _inner(state_id)

        if state_id in ['finalized', 'head']:
            current = get_current()
            if not current:
                raise ValueError("No current running slot number available")

            if state_id == 'finalized':
                finalized = get_next_non_missed_slot(
                    self,
                    current,
                    finalized_slot,
                ).message.slot
                return _inner(SlotNumber(int(finalized)))

            if state_id == 'head':
                possible_head = (((current * 32) + 1) // 32) + 32
                head = get_next_non_missed_slot(
                    self,
                    SlotNumber(possible_head),
                    finalized_slot,
                ).message.slot
                return _inner(SlotNumber(int(head)))

        raise ValueError(f"Unknown state_id for patching: {state_id}")

    def get_block_details(self, state_id: SlotNumber | BlockRoot) -> BlockDetailsResponse:
        """Spec: https://ethereum.github.io/beacon-APIs/#/Beacon/getBlockV2"""
        data, _ = self._get(
            self.API_GET_BLOCK_DETAILS,
            path_params=(state_id,),
        )
        if not isinstance(data, dict):
            raise ValueError("Expected mapping response from getBlockV2")
        slot_details = BlockDetailsResponse.from_response(**data)
        block_from_fork = None
        while not block_from_fork:
            try:
                block_from_fork = web3.eth.get_block(int(slot_details.message.body.execution_payload.block_number))
            except Exception as e:
                logger.debug(f"FORKED CLIENT: {e}")
            if not block_from_fork:
                latest = web3.eth.get_block('latest')
                diff = int(slot_details.message.body.execution_payload.block_number) - int(latest['number'])
                for _ in range(diff):
                    web3.provider.make_request('evm_mine', [])
                    logger.debug(f"FORKED CLIENT: Mined block {web3.eth.block_number}")
        slot_details.message.body.execution_payload.block_number = block_from_fork['number']
        slot_details.message.body.execution_payload.block_hash = block_from_fork['hash'].hex()
        slot_details.message.body.execution_payload.timestamp = block_from_fork['timestamp']
        return slot_details

    with monkeypatch.context():
        monkeypatch.setattr(
            ConsensusClient,
            "get_block_details",
            get_block_details,
        )
        monkeypatch.setattr(
            ConsensusClient,
            "get_block_root",
            get_block_root,
        )
        yield


@pytest.fixture()
def mock_ipfs_client(monkeypatch):
    def _publish(self, content: bytes, name: str | None = None) -> CID:
        return CID('Qm' + 'f' * 46)

    with monkeypatch.context():
        monkeypatch.setattr(
            MultiIPFSProvider,
            "publish",
            _publish,
        )
        yield


@pytest.fixture()
def module(web3, mock_ipfs_client, zero_min_checkpoint_step, adjust_cl_client):
    cc = ConsensusClientModule(variables.CONSENSUS_CLIENT_URI, web3)
    kac = KeysAPIClientModule(variables.KEYS_API_URI, web3)
    ipfs = MultiIPFSProvider(ipfs_providers())
    web3.attach_modules(
        {
            'lido_contracts': LidoContracts,
            'lido_validators': LidoValidatorsProvider,
            'transaction': TransactionUtils,
            'cc': lambda: cc,  # type: ignore[dict-item]
            'kac': lambda: kac,  # type: ignore[dict-item]
            "ipfs": lambda: ipfs,
            "csm": CSM,
        }
    )
    _module = CSOracle(web3)
    yield _module
    subprocess.run(['rm', 'cache.pkl'])


def first_slot_of_epoch(epoch: int) -> SlotNumber:
    return SlotNumber(epoch * 32 - 31)


@pytest.mark.fork
@pytest.mark.parametrize(
    'running_slots',
    [
        [first_slot_of_epoch(i) for i in range(frame_config.initial_epoch - 2, frame_config.initial_epoch + 6)],
        [first_slot_of_epoch(i) for i in range(frame_config.initial_epoch + 2, frame_config.initial_epoch + 6)],
    ],
    ids=['start_before_initial_epoch', 'start_after_initial_epoch'],
    indirect=True,
)
def test_execute_module(
    monkeypatch,
    running_slots,
    use_fork_accounts_as_reporters,
    consensus,
    module: CSOracle,
):

    get_next, _ = running_slots

    initial_ref_slot = consensus.get_initial_ref_slot()
    to_distribute_before_report = module.w3.csm.fee_distributor.shares_to_distribute()

    while get_next():

        block_root = BlockRoot(module.w3.cc.get_block_root('finalized').root)
        block_details = module.w3.cc.get_block_details(block_root)
        bs = build_blockstamp(block_details)

        for pk in use_fork_accounts_as_reporters:
            if module.w3.csm.oracle.get_last_processing_ref_slot() == initial_ref_slot:
                # finished, no need to continue trying to submit reports
                break
            with monkeypatch.context():
                monkeypatch.setattr(
                    variables,
                    "ACCOUNT",
                    Account.from_key(pk),
                )
                module.execute_module(last_finalized_blockstamp=bs)

    last_processing_after_report = module.w3.csm.oracle.get_last_processing_ref_slot()
    assert last_processing_after_report == initial_ref_slot, "Last processing ref slot should equal to initial ref slot"

    to_distribute_after_report = module.w3.csm.fee_distributor.shares_to_distribute()
    assert to_distribute_after_report < to_distribute_before_report, "Shares to distribute should decrease"

    nos_count = int(module.w3.csm.module.functions.getNodeOperatorsCount().call())
    assert to_distribute_after_report <= nos_count, "Dust after distribution should be less or equal to NOs count"
